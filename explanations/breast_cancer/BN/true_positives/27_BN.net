
net {
  name = unnamedBN;
  software = "aGrUM 0.18.2";
  node_size = (50 50);
}

node radius_mean {
   states = ("(16.000, 19.0000]" );
   label = "radius_mean";
   ID = "radius_mean";
}

node texture_mean {
   states = ("(16.5999, 20.0000]" "(20.000, 21.4000]" );
   label = "texture_mean";
   ID = "texture_mean";
}

node perimeter_mean {
   states = ("(105.0399, 125.8000]" "(125.00000, 131.0000]" );
   label = "perimeter_mean";
   ID = "perimeter_mean";
}

node area_mean {
   states = ("(1125.00000, 1206.2000]" "(794.00000, 1125.0000]" );
   label = "area_mean";
   ID = "area_mean";
}

node smoothness_mean {
   states = ("(0.00000, 0.0900]" "(0.0750, 0.0800]" );
   label = "smoothness_mean";
   ID = "smoothness_mean";
}

node compactness_mean {
   states = ("(0.0000, 0.0900]" "(0.0000, 0.1000]" );
   label = "compactness_mean";
   ID = "compactness_mean";
}

node concavity_mean {
   states = ("(0.0000, 0.1000]" );
   label = "concavity_mean";
   ID = "concavity_mean";
}

node concave points_mean {
   states = ("(0.00000, 0.0700]" "(0.0289, 0.0500]" );
   label = "concave points_mean";
   ID = "concave points_mean";
}

node symmetry_mean {
   states = ("(0.000, 0.1000]" "(0.1200, 0.1000]" );
   label = "symmetry_mean";
   ID = "symmetry_mean";
}

node fractal_dimension_mean {
   states = ("(0.0000, 0.0500]" "(0.00000, 0.0500]" );
   label = "fractal_dimension_mean";
   ID = "fractal_dimension_mean";
}

node radius_se {
   states = ("(0.000, 0.2000]" "(0.000, 0.5000]" );
   label = "radius_se";
   ID = "radius_se";
}

node texture_se {
   states = ("(0.00, 0.0000]" "(0.000, 0.4000]" "(0.000, 0.6000]" );
   label = "texture_se";
   ID = "texture_se";
}

node perimeter_se {
   states = ("(0.000, 1.8000]" "(1.000, 1.9000]" "(1.000, 3.9000]" );
   label = "perimeter_se";
   ID = "perimeter_se";
}

node area_se {
   states = ("(28.0000, 73.9000]" "(7.0000, 28.9000]" "(73.0000, 81.3000]" );
   label = "area_se";
   ID = "area_se";
}

node smoothness_se {
   states = ("(-0.0081, 0.0020]" "(0.0029, 0.0050]" "(0.0051, 0.0050]" );
   label = "smoothness_se";
   ID = "smoothness_se";
}

node compactness_se {
   states = ("(-0.000000, 0.0080]" "(0.00000, 0.0100]" "(0.0085, 0.0100]" );
   label = "compactness_se";
   ID = "compactness_se";
}

node concavity_se {
   states = ("(-0.0055, 0.0100]" "(0.00000, 0.0300]" );
   label = "concavity_se";
   ID = "concavity_se";
}

node concave points_se {
   states = ("(-0.0068, 0.0050]" "(0.0052, 0.0080]" );
   label = "concave points_se";
   ID = "concave points_se";
}

node symmetry_se {
   states = ("(-0.0020, 0.0000]" "(0.0000, 0.0100]" "(0.00000, 0.0100]" );
   label = "symmetry_se";
   ID = "symmetry_se";
}

node fractal_dimension_se {
   states = ("(-0.0090, 0.0010]" "(0.000000, 0.0020]" "(0.0011, 0.0000]" );
   label = "fractal_dimension_se";
   ID = "fractal_dimension_se";
}

node radius_worst {
   states = ("(18.6399, 20.9000]" "(20.0000, 23.1000]" "(23.0000, 23.5000]" );
   label = "radius_worst";
   ID = "radius_worst";
}

node texture_worst {
   states = ("(23.2799, 26.3000]" "(26.0000, 26.5000]" "(26.0000, 28.3000]" );
   label = "texture_worst";
   ID = "texture_worst";
}

node perimeter_worst {
   states = ("(130.00000, 136.8000]" "(136.00000, 153.9000]" );
   label = "perimeter_worst";
   ID = "perimeter_worst";
}

node area_worst {
   states = ("(1383.00000, 1717.0000]" "(983.000000, 1383.0000]" );
   label = "area_worst";
   ID = "area_worst";
}

node smoothness_worst {
   states = ("(0.00, 0.1000]" "(0.000, 0.1000]" );
   label = "smoothness_worst";
   ID = "smoothness_worst";
}

node compactness_worst {
   states = ("(0.000, 0.2000]" "(0.000, 0.3000]" );
   label = "compactness_worst";
   ID = "compactness_worst";
}

node concavity_worst {
   states = ("(0.000, 0.3000]" "(0.000, 0.4000]" );
   label = "concavity_worst";
   ID = "concavity_worst";
}

node concave points_worst {
   states = ("(0.000, 0.1000]" "(0.1200, 0.1000]" );
   label = "concave points_worst";
   ID = "concave points_worst";
}

node symmetry_worst {
   states = ("(0.000, 0.3000]" );
   label = "symmetry_worst";
   ID = "symmetry_worst";
}

node fractal_dimension_worst {
   states = ("(0.0000, 0.0000]" "(0.0489, 0.0600]" );
   label = "fractal_dimension_worst";
   ID = "fractal_dimension_worst";
}

node diagnosis {
   states = (Yes );
   label = "diagnosis";
   ID = "diagnosis";
}

potential ( radius_mean | texture_se   perimeter_mean   ) {
   data = 
   (((   1)   % perimeter_mean="(105.0399, 125.8000]"   texture_se="(0.00, 0.0000]"   
   (   1))   % perimeter_mean="(125.00000, 131.0000]"   texture_se="(0.00, 0.0000]"   
   ((   1)   % perimeter_mean="(105.0399, 125.8000]"   texture_se="(0.000, 0.4000]"   
   (   1))   % perimeter_mean="(125.00000, 131.0000]"   texture_se="(0.000, 0.4000]"   
   ((   1)   % perimeter_mean="(105.0399, 125.8000]"   texture_se="(0.000, 0.6000]"   
   (   1)));   % perimeter_mean="(125.00000, 131.0000]"   texture_se="(0.000, 0.6000]"   
}

potential ( texture_mean | concave points_mean   ) {
   data = 
   ((   0.983221   0.0167785)   % concave points_mean="(0.00000, 0.0700]"   
   (   0.998901   0.0010989));   % concave points_mean="(0.0289, 0.0500]"   
}

potential ( perimeter_mean | concave points_mean   ) {
   data = 
   ((   0.969799   0.0302013)   % concave points_mean="(0.00000, 0.0700]"   
   (   0.998901   0.0010989));   % concave points_mean="(0.0289, 0.0500]"   
}

potential ( area_mean | concave points_mean   ) {
   data = 
   ((   0.0436242   0.956376)   % concave points_mean="(0.00000, 0.0700]"   
   (   0.0010989   0.998901));   % concave points_mean="(0.0289, 0.0500]"   
}

potential ( smoothness_mean | concave points_mean   ) {
   data = 
   ((   0.0704698   0.92953)   % concave points_mean="(0.00000, 0.0700]"   
   (   0.0010989   0.998901));   % concave points_mean="(0.0289, 0.0500]"   
}

potential ( compactness_mean | concave points_mean   ) {
   data = 
   ((   0.942953   0.057047)   % concave points_mean="(0.00000, 0.0700]"   
   (   0.998901   0.0010989));   % concave points_mean="(0.0289, 0.0500]"   
}

potential ( concavity_mean | texture_se   ) {
   data = 
   ((   1)   % texture_se="(0.00, 0.0000]"   
   (   1)   % texture_se="(0.000, 0.4000]"   
   (   1));   % texture_se="(0.000, 0.6000]"   
}

potential ( concave points_mean | fractal_dimension_mean   symmetry_mean   ) {
   data = 
   (((   0.5   0.5)   % symmetry_mean="(0.000, 0.1000]"   fractal_dimension_mean="(0.0000, 0.0500]"   
   (   0.000618047   0.999382))   % symmetry_mean="(0.1200, 0.1000]"   fractal_dimension_mean="(0.0000, 0.0500]"   
   ((   0.1   0.9)   % symmetry_mean="(0.000, 0.1000]"   fractal_dimension_mean="(0.00000, 0.0500]"   
   (   0.754453   0.245547)));   % symmetry_mean="(0.1200, 0.1000]"   fractal_dimension_mean="(0.00000, 0.0500]"   
}

potential ( symmetry_mean | concavity_mean   ) {
   data = 
   ((   0.00496689   0.995033));   % concavity_mean="(0.0000, 0.1000]"   
}

potential ( fractal_dimension_mean | texture_se   ) {
   data = 
   ((   0.961538   0.0384615)   % texture_se="(0.00, 0.0000]"   
   (   0.132653   0.867347)   % texture_se="(0.000, 0.4000]"   
   (   0.999091   0.000909091));   % texture_se="(0.000, 0.6000]"   
}

potential ( radius_se | texture_se   fractal_dimension_mean   ) {
   data = 
   (((   0.02   0.98)   % fractal_dimension_mean="(0.0000, 0.0500]"   texture_se="(0.00, 0.0000]"   
   (   0.5   0.5))   % fractal_dimension_mean="(0.00000, 0.0500]"   texture_se="(0.00, 0.0000]"   
   ((   0.203297   0.796703)   % fractal_dimension_mean="(0.0000, 0.0500]"   texture_se="(0.000, 0.4000]"   
   (   0.99916   0.000840336))   % fractal_dimension_mean="(0.00000, 0.0500]"   texture_se="(0.000, 0.4000]"   
   ((   0.000454959   0.999545)   % fractal_dimension_mean="(0.0000, 0.0500]"   texture_se="(0.000, 0.6000]"   
   (   0.5   0.5)));   % fractal_dimension_mean="(0.00000, 0.0500]"   texture_se="(0.000, 0.6000]"   
}

potential ( texture_se | perimeter_se   ) {
   data = 
   ((   0.0336058   0.932788   0.0336058)   % perimeter_se="(0.000, 1.8000]"   
   (   0.000648508   0.000648508   0.998703)   % perimeter_se="(1.000, 1.9000]"   
   (   0.0133333   0.0133333   0.973333));   % perimeter_se="(1.000, 3.9000]"   
}

potential ( perimeter_se | area_se   ) {
   data = 
   ((   0.000664011   0.998672   0.000664011)   % area_se="(28.0000, 73.9000]"   
   (   0.915833   0.0233333   0.0608333)   % area_se="(7.0000, 28.9000]"   
   (   0.0833333   0.833333   0.0833333));   % area_se="(73.0000, 81.3000]"   
}

potential ( area_se | smoothness_se   ) {
   data = 
   ((   0.0700539   0.922248   0.00769823)   % smoothness_se="(-0.0081, 0.0020]"   
   (   0.998579   0.000710732   0.000710732)   % smoothness_se="(0.0029, 0.0050]"   
   (   0.833333   0.0833333   0.0833333));   % smoothness_se="(0.0051, 0.0050]"   
}

potential ( smoothness_se | compactness_se   ) {
   data = 
   ((   0.939855   0.0528986   0.00724638)   % compactness_se="(-0.000000, 0.0080]"   
   (   0.0175439   0.964912   0.0175439)   % compactness_se="(0.00000, 0.0100]"   
   (   0.00078064   0.998439   0.00078064));   % compactness_se="(0.0085, 0.0100]"   
}

potential ( compactness_se | concavity_se   ) {
   data = 
   ((   0.91992   0.037037   0.043043)   % concavity_se="(-0.0055, 0.0100]"   
   (   0.00123001   0.00123001   0.99754));   % concavity_se="(0.00000, 0.0300]"   
}

potential ( concavity_se | symmetry_se   ) {
   data = 
   ((   0.00147059   0.998529)   % symmetry_se="(-0.0020, 0.0000]"   
   (   0.91636   0.0836397)   % symmetry_se="(0.0000, 0.0100]"   
   (   0.0227273   0.977273));   % symmetry_se="(0.00000, 0.0100]"   
}

potential ( concave points_se | symmetry_se   concavity_se   ) {
   data = 
   (((   0.5   0.5)   % concavity_se="(-0.0055, 0.0100]"   symmetry_se="(-0.0020, 0.0000]"   
   (   0.000736377   0.999264))   % concavity_se="(0.00000, 0.0300]"   symmetry_se="(-0.0020, 0.0000]"   
   ((   0.999498   0.000501505)   % concavity_se="(-0.0055, 0.0100]"   symmetry_se="(0.0000, 0.0100]"   
   (   0.664835   0.335165))   % concavity_se="(0.00000, 0.0300]"   symmetry_se="(0.0000, 0.0100]"   
   ((   0.5   0.5)   % concavity_se="(-0.0055, 0.0100]"   symmetry_se="(0.00000, 0.0100]"   
   (   0.0116279   0.988372)));   % concavity_se="(0.00000, 0.0300]"   symmetry_se="(0.00000, 0.0100]"   
}

potential ( symmetry_se | fractal_dimension_se   ) {
   data = 
   ((   0.0213749   0.941652   0.0369728)   % fractal_dimension_se="(-0.0090, 0.0010]"   
   (   0.948718   0.025641   0.025641)   % fractal_dimension_se="(0.000000, 0.0020]"   
   (   0.99789   0.00105485   0.00105485));   % fractal_dimension_se="(0.0011, 0.0000]"   
}

potential (fractal_dimension_se) {
   data = (  0.636865 0.0143488 0.348786);
}

potential ( radius_worst | symmetry_worst   fractal_dimension_se   ) {
   data = 
   (((   0.998845   0.000577701   0.000577701)   % fractal_dimension_se="(-0.0090, 0.0010]"   symmetry_worst="(0.000, 0.3000]"   
   (   0.948718   0.025641   0.025641)   % fractal_dimension_se="(0.000000, 0.0020]"   symmetry_worst="(0.000, 0.3000]"   
   (   0.0770042   0.912447   0.0105485)));   % fractal_dimension_se="(0.0011, 0.0000]"   symmetry_worst="(0.000, 0.3000]"   
}

potential ( texture_worst | radius_worst   radius_mean   ) {
   data = 
   (((   0.998912   0.000543774   0.000543774))   % radius_mean="(16.000, 19.0000]"   radius_worst="(18.6399, 20.9000]"   
   ((   0.10496   0.852364   0.0426759))   % radius_mean="(16.000, 19.0000]"   radius_worst="(20.0000, 23.1000]"   
   ((   0.833333   0.0833333   0.0833333)));   % radius_mean="(16.000, 19.0000]"   radius_worst="(23.0000, 23.5000]"   
}

potential ( perimeter_worst | texture_worst   area_worst   ) {
   data = 
   (((   0.5   0.5)   % area_worst="(1383.00000, 1717.0000]"   texture_worst="(23.2799, 26.3000]"   
   (   0.999613   0.000387297))   % area_worst="(983.000000, 1383.0000]"   texture_worst="(23.2799, 26.3000]"   
   ((   0.998721   0.00127877)   % area_worst="(1383.00000, 1717.0000]"   texture_worst="(26.0000, 26.5000]"   
   (   0.645631   0.354369))   % area_worst="(983.000000, 1383.0000]"   texture_worst="(26.0000, 26.5000]"   
   ((   0.5   0.5)   % area_worst="(1383.00000, 1717.0000]"   texture_worst="(26.0000, 28.3000]"   
   (   0.98   0.02)));   % area_worst="(983.000000, 1383.0000]"   texture_worst="(26.0000, 28.3000]"   
}

potential ( area_worst | texture_worst   ) {
   data = 
   ((   0.000773994   0.999226)   % texture_worst="(23.2799, 26.3000]"   
   (   0.791498   0.208502)   % texture_worst="(26.0000, 26.5000]"   
   (   0.0384615   0.961538));   % texture_worst="(26.0000, 28.3000]"   
}

potential ( smoothness_worst | area_worst   ) {
   data = 
   ((   0.141221   0.858779)   % area_worst="(1383.00000, 1717.0000]"   
   (   0.998943   0.00105708));   % area_worst="(983.000000, 1383.0000]"   
}

potential ( compactness_worst | smoothness_worst   ) {
   data = 
   ((   0.998982   0.00101833)   % smoothness_worst="(0.00, 0.1000]"   
   (   0.181416   0.818584));   % smoothness_worst="(0.000, 0.1000]"   
}

potential ( concavity_worst | compactness_worst   ) {
   data = 
   ((   0.999022   0.000978474)   % compactness_worst="(0.000, 0.2000]"   
   (   0.284946   0.715054));   % compactness_worst="(0.000, 0.3000]"   
}

potential ( concave points_worst | concavity_worst   ) {
   data = 
   ((   0.000931099   0.999069)   % concavity_worst="(0.000, 0.3000]"   
   (   0.0671642   0.932836));   % concavity_worst="(0.000, 0.4000]"   
}

potential ( symmetry_worst | texture_se   perimeter_mean   ) {
   data = 
   (((   1)   % perimeter_mean="(105.0399, 125.8000]"   texture_se="(0.00, 0.0000]"   
   (   1))   % perimeter_mean="(125.00000, 131.0000]"   texture_se="(0.00, 0.0000]"   
   ((   1)   % perimeter_mean="(105.0399, 125.8000]"   texture_se="(0.000, 0.4000]"   
   (   1))   % perimeter_mean="(125.00000, 131.0000]"   texture_se="(0.000, 0.4000]"   
   ((   1)   % perimeter_mean="(105.0399, 125.8000]"   texture_se="(0.000, 0.6000]"   
   (   1)));   % perimeter_mean="(125.00000, 131.0000]"   texture_se="(0.000, 0.6000]"   
}

potential ( fractal_dimension_worst | concavity_worst   ) {
   data = 
   ((   0.000931099   0.999069)   % concavity_worst="(0.000, 0.3000]"   
   (   0.156716   0.843284));   % concavity_worst="(0.000, 0.4000]"   
}

potential ( diagnosis | perimeter_mean   texture_se   ) {
   data = 
   (((   1)   % texture_se="(0.00, 0.0000]"   perimeter_mean="(105.0399, 125.8000]"   
   (   1)   % texture_se="(0.000, 0.4000]"   perimeter_mean="(105.0399, 125.8000]"   
   (   1))   % texture_se="(0.000, 0.6000]"   perimeter_mean="(105.0399, 125.8000]"   
   ((   1)   % texture_se="(0.00, 0.0000]"   perimeter_mean="(125.00000, 131.0000]"   
   (   1)   % texture_se="(0.000, 0.4000]"   perimeter_mean="(125.00000, 131.0000]"   
   (   1)));   % texture_se="(0.000, 0.6000]"   perimeter_mean="(125.00000, 131.0000]"   
}


